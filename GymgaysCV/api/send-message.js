const https = require('https');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const BOT_TOKEN = process.env.BOT_TOKEN;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function sendTelegramMessage(chatId, text) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify({
      chat_id: chatId,
      text: text
    });

    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${BOT_TOKEN}/sendMessage`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Content-Length': Buffer.byteLength(data, 'utf8')
      }
    };

    console.log(`üåê –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚Üí ${chatId}: "${text}"`);
    
    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        try {
          const parsedResponse = JSON.parse(responseData);
          if (parsedResponse.ok) {
            console.log(`ü§ñ –ë–û–¢ (–í–ï–ë) ‚Üí ${chatId}: "${text}"`);
            resolve({ ok: true, result: parsedResponse.result });
          } else {
            console.error('‚ùå Telegram API error:', parsedResponse.description);
            resolve({ ok: false, error: parsedResponse.description });
          }
        } catch (e) {
          console.error('‚ùå Failed to parse Telegram response:', responseData);
          resolve({ ok: false, error: 'Failed to parse response' });
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå Error sending message via web:', error);
      reject({ ok: false, error: error.message });
    });

    req.write(data, 'utf8');
    req.end();
  });
}

// Vercel —Ñ—É–Ω–∫—Ü—ñ—è
module.exports = async (req, res) => {
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–æ–±–∫–∞ OPTIONS –∑–∞–ø–∏—Ç—É (preflight)
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    res.status(405).json({ ok: false, error: 'Method not allowed' });
    return;
  }

  try {
    const { chat_id, text } = req.body;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!chat_id || !text) {
      res.status(400).json({ 
        ok: false, 
        error: 'chat_id —Ç–∞ text —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏' 
      });
      return;
    }

    if (!BOT_TOKEN) {
      res.status(500).json({ 
        ok: false, 
        error: 'BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' 
      });
      return;
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const result = await sendTelegramMessage(chat_id, text);
    
    res.status(200).json(result);

  } catch (error) {
    console.error('‚ùå Error in send-message API:', error);
    res.status(500).json({ 
      ok: false, 
      error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
}; 