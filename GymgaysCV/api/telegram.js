const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
const moment = require('moment');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GOOGLE_SHEETS_ID = process.env.GOOGLE_SHEETS_ID;
const GOOGLE_SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è webhook —Ä–µ–∂–∏–º—É (–±–µ–∑ polling)
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
console.log('ü§ñ Bot initialized for webhook mode');
console.log('üîë Token length:', BOT_TOKEN ? BOT_TOKEN.length : 'NOT SET');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets API
let auth, sheets;

try {
  auth = new google.auth.JWT(
    GOOGLE_SERVICE_ACCOUNT_EMAIL,
    null,
    GOOGLE_PRIVATE_KEY,
    ['https://www.googleapis.com/auth/spreadsheets']
  );

  sheets = google.sheets({ version: 'v4', auth });
  console.log('üìä Google Sheets API initialized successfully');
} catch (error) {
  console.error('‚ùå Error initializing Google Sheets API:', error.message);
}

// Utility —Ñ—É–Ω–∫—Ü—ñ—ó
function getCurrentDate() {
  return moment().format('DD.MM.YYYY');
}

function getCurrentMonth() {
  return moment().format('MM.YYYY');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function sendTelegramMessage(chatId, text) {
  return new Promise((resolve, reject) => {
    const https = require('https');
    const data = JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    });

    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${BOT_TOKEN}/sendMessage`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };

    console.log('üì§ Sending message to chat:', chatId);
    
    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        console.log('‚úÖ Message sent successfully');
        resolve(responseData);
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå Error sending message:', error);
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function handleCommand(msg) {
  const chatId = msg.chat.id;
  const command = msg.text.toLowerCase();
  
  console.log('üöÄ Handling command:', command, 'from:', msg.from.first_name, msg.from.id);
  
  try {
    if (command === '/start') {
      const welcomeMessage = `
üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ —Å–ø–æ—Ä—Ç–∑–∞–ª—É!

üì∏ –©–æ–± –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑ –∑–∞–ª—É
üìä /stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å
üèÜ /top - —Ç–æ–ø –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤
‚ùì /help - –¥–æ–ø–æ–º–æ–≥–∞

–î–∞–≤–∞–π —Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ä–º—É —Ä–∞–∑–æ–º! üí™
      `;
      
      await sendTelegramMessage(chatId, welcomeMessage);
      
    } else if (command === '/help') {
      const helpMessage = `
‚ÑπÔ∏è –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ –∑–∞–ª—ñ
2Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–∞—Ö—É—î –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è
3Ô∏è‚É£ –û–¥–∏–Ω –¥–µ–Ω—å = –æ–¥–Ω–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ñ–æ—Ç–æ –∫—ñ–ª—å–∫–∞)

üìã –ö–æ–º–∞–Ω–¥–∏:
/stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
/top - —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

üìä –í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ Google Sheets –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É!
      `;
      
      await sendTelegramMessage(chatId, helpMessage);
      
    } else if (command === '/stats') {
      const userId = msg.from.id;
      const firstName = msg.from.first_name;
      
      const userAttendance = await getUserStats(userId);
      const currentMonth = moment().format('MMMM YYYY');
      
      const statsMessage = `
üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${currentMonth}:

üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: ${userAttendance}
üë§ ${firstName}

${userAttendance >= 20 ? 'üî• –ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ! –¢–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —á–µ–º–ø—ñ–æ–Ω!' :
  userAttendance >= 15 ? 'üí™ –í—ñ–¥–º—ñ–Ω–Ω–æ! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!' :
  userAttendance >= 10 ? 'üëç –î–æ–±—Ä–µ! –ú–æ–∂–µ—à —â–µ –∫—Ä–∞—â–µ!' :
  userAttendance >= 5 ? 'üòä –ù–µ–ø–æ–≥–∞–Ω–æ, –∞–ª–µ —î –∫—É–¥–∏ —Ä–æ—Å—Ç–∏!' :
  'üòÖ –ß–∞—Å –∞–∫—Ç–∏–≤–Ω—ñ—à–µ –±—Ä–∞—Ç–∏—Å—è –∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!'}
      `;
      
      await sendTelegramMessage(chatId, statsMessage);
      
    } else if (command === '/top') {
      const topUsers = await getTopUsers();
      const currentMonth = moment().format('MMMM YYYY');
      
      if (topUsers.length === 0) {
        await sendTelegramMessage(chatId, 'üìä –ü–æ–∫–∏ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è.');
        return;
      }
      
      let topMessage = `üèÜ –¢–æ–ø –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤ –∑–∞ ${currentMonth}:\n\n`;
      
      topUsers.forEach((user, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
        topMessage += `${medal} ${index + 1}. ${user.name} - ${user.count} –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å\n`;
      });
      
      topMessage += '\nüí™ –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏, —á–µ–º–ø—ñ–æ–Ω–∏!';
      
      await sendTelegramMessage(chatId, topMessage);
    }
    
  } catch (error) {
    console.error('‚ùå Error handling command:', error);
    await sendTelegramMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.')
      .catch(err => console.error('‚ùå Error sending error message:', err));
  }
}

async function handlePhoto(msg) {
  console.log('üì∏ Handling photo from:', msg.from.first_name, msg.from.id);
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userName = msg.from.username || '';
  const firstName = msg.from.first_name || '–ù–µ–≤—ñ–¥–æ–º–æ';
  const today = getCurrentDate();
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ
    const alreadyVisited = await checkTodayAttendance(userId);
    
    if (alreadyVisited) {
      await sendTelegramMessage(chatId, `‚úÖ ${firstName}, —Ç–≤–æ—î –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (${today}) –≤–∂–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! üèãÔ∏è‚Äç‚ôÇÔ∏è`);
      return;
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è
    const saved = await saveAttendance(userId, userName, firstName, today);
    
    if (saved) {
      const userStats = await getUserStats(userId);
      const successMessage = `üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ, ${firstName}! –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!\n\n` +
        `üìÖ –î–∞—Ç–∞: ${today}\n` +
        `üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–≤–æ—ó—Ö –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${userStats}\n\n` +
        `–¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! üí™`;
      
      await sendTelegramMessage(chatId, successMessage);
    } else {
      await sendTelegramMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ:', error);
    await sendTelegramMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.')
      .catch(err => console.error('‚ùå Error sending general error message:', err));
  }
}

async function handleRegularMessage(msg) {
  console.log('üí¨ Handling regular message:', msg.text);
  
  const chatId = msg.chat.id;
  await sendTelegramMessage(chatId, 
    'üì∏ –©–æ–± –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∑–∞–ª—É, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!\n\n' +
    '‚ÑπÔ∏è /help - –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏'
  ).catch(error => console.error('‚ùå Error sending instruction message:', error));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –≤ Google Sheets
async function saveAttendance(userId, userName, firstName, date) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ª–∏—Å—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
    const monthYear = getCurrentMonth();
    const sheetName = `–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å_${monthYear}`;
    
    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –ª–∏—Å—Ç–∞
    let sheetExists = true;
    try {
      await sheets.spreadsheets.values.get({
        spreadsheetId: GOOGLE_SHEETS_ID,
        range: `${sheetName}!A1:Z1000`,
      });
    } catch (error) {
      sheetExists = false;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if (!sheetExists) {
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: GOOGLE_SHEETS_ID,
        resource: {
          requests: [{
            addSheet: {
              properties: {
                title: sheetName
              }
            }
          }]
        }
      });

      // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      await sheets.spreadsheets.values.update({
        spreadsheetId: GOOGLE_SHEETS_ID,
        range: `${sheetName}!A1:E1`,
        valueInputOption: 'RAW',
        resource: {
          values: [['User ID', "–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "–Ü–º'—è", '–î–∞—Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è', '–ß–∞—Å']]
        }
      });
    }

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    const currentTime = moment().format('HH:mm:ss');
    await sheets.spreadsheets.values.append({
      spreadsheetId: GOOGLE_SHEETS_ID,
      range: `${sheetName}!A:E`,
      valueInputOption: 'RAW',
      resource: {
        values: [[userId, userName, firstName, date, currentTime]]
      }
    });

    return true;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ Google Sheets:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –≤–∂–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ
async function checkTodayAttendance(userId) {
  try {
    const monthYear = getCurrentMonth();
    const sheetName = `–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å_${monthYear}`;
    const today = getCurrentDate();

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEETS_ID,
      range: `${sheetName}!A:E`,
    });

    const rows = response.data.values || [];
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      if (row[0] == userId && row[3] === today) {
        return true;
      }
    }
    
    return false;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function getUserStats(userId) {
  try {
    const monthYear = getCurrentMonth();
    const sheetName = `–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å_${monthYear}`;

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEETS_ID,
      range: `${sheetName}!A:E`,
    });

    const rows = response.data.values || [];
    let userAttendance = 0;
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      if (row[0] == userId) {
        userAttendance++;
      }
    }
    
    return userAttendance;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return 0;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function getTopUsers() {
  try {
    const monthYear = getCurrentMonth();
    const sheetName = `–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å_${monthYear}`;

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEETS_ID,
      range: `${sheetName}!A:E`,
    });

    const rows = response.data.values || [];
    const userStats = {};
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      const userId = row[0];
      const userName = row[2] || row[1];
      
      if (!userStats[userId]) {
        userStats[userId] = {
          name: userName,
          count: 0
        };
      }
      userStats[userId].count++;
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å
    const sortedUsers = Object.entries(userStats)
      .map(([userId, data]) => ({ userId, ...data }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 10);
    
    return sortedUsers;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    return [];
  }
}

// –°—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ handleCommand, handlePhoto, handleRegularMessage

// Webhook –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  console.log('üì® Received request:', req.method);
  
  if (req.method === 'POST') {
    try {
      console.log('üì• Update received:', JSON.stringify(req.body, null, 2));
      console.log('üîë BOT_TOKEN exists:', !!BOT_TOKEN);
      console.log('üìã GOOGLE_SHEETS_ID:', !!GOOGLE_SHEETS_ID);
      console.log('üìß SERVICE_ACCOUNT_EMAIL:', !!GOOGLE_SERVICE_ACCOUNT_EMAIL);
      console.log('üîê PRIVATE_KEY exists:', !!GOOGLE_PRIVATE_KEY);
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É
      if (req.body.message) {
        console.log('üí¨ Processing message...');
        const msg = req.body.message;
        
        // –Ø–∫—â–æ —Ü–µ –∫–æ–º–∞–Ω–¥–∞
        if (msg.text && msg.text.startsWith('/')) {
          console.log('‚ö° Processing command:', msg.text);
          await handleCommand(msg);
        }
        // –Ø–∫—â–æ —Ü–µ —Ñ–æ—Ç–æ
        else if (msg.photo) {
          console.log('üì∏ Processing photo...');
          await handlePhoto(msg);
        }
        // –ó–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        else if (msg.text) {
          console.log('üí¨ Processing regular text...');
          await handleRegularMessage(msg);
        }
      }
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('‚ùå Webhook error:', error);
      res.status(500).json({ error: 'Internal server error', details: error.message });
    }
  } else {
    console.log('‚úÖ Health check - Bot is running!');
    res.status(200).json({ 
      message: 'Gym Attendance Bot is running!',
      timestamp: new Date().toISOString(),
      env_check: {
        bot_token: !!BOT_TOKEN,
        sheets_id: !!GOOGLE_SHEETS_ID,
        service_email: !!GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: !!GOOGLE_PRIVATE_KEY
      }
    });
  }
}; 