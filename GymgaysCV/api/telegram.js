const { Telegraf } = require('telegraf');
const { google } = require('googleapis');

/**
 * –ü–æ–ª—É—á–∞–µ–º creds: –ª–∏–±–æ –ø–∞—Ä–∞ EMAIL+KEY, –ª–∏–±–æ —Ü–µ–ª—å–Ω—ã–π JSON –≤ GOOGLE_CREDENTIALS
 */
function getServiceAccountCreds() {
  if (process.env.GOOGLE_CREDENTIALS) {
    try {
      const json = JSON.parse(process.env.GOOGLE_CREDENTIALS);
      return {
        client_email: json.client_email,
        private_key: json.private_key,
      };
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å GOOGLE_CREDENTIALS. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.');
    }
  }
  return {
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  };
}

function getSpreadsheetId() {
  if (process.env.GOOGLE_SHEETS_ID) return process.env.GOOGLE_SHEETS_ID;
  const url = process.env.GOOGLE_SHEETS_URL || '';
  const m = url.match(/\/d\/([a-zA-Z0-9-_]+)(?:\/|$)/);
  return m ? m[1] : undefined;
}

const creds = getServiceAccountCreds();
const SPREADSHEET_ID = getSpreadsheetId();
if (!SPREADSHEET_ID) throw new Error('–ù–µ –∑–∞–¥–∞–Ω Spreadsheet ID –∏–ª–∏ URL (GOOGLE_SHEETS_ID / GOOGLE_SHEETS_URL)');

/**
 * –°–æ–∑–¥–∞—ë–º/–∫–µ—à–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets.
 */
let sheetsClient;
function getSheetsClient() {
  if (sheetsClient) return sheetsClient;

  const auth = new google.auth.JWT(
    creds.client_email,
    null,
    creds.private_key,
    ['https://www.googleapis.com/auth/spreadsheets']
  );
  sheetsClient = google.sheets({ version: 'v4', auth });
  return sheetsClient;
}

/**
 * –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞.
 */
const bot = new Telegraf(process.env.BOT_TOKEN);

const SHEET_NAME = process.env.GOOGLE_SHEET_NAME || 'Attendance';

const KEYWORDS = ['#gym', '#–∑–∞–ª', 'gym', '–∑–∞–ª'];

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è: –¥–∞—Ç–∞, userId, username.
 */
async function recordAttendance({ telegramId, username }) {
  const sheets = getSheetsClient();
  const today = new Date().toISOString().slice(0, 10); // YYYY-MM-DD

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
  await sheets.spreadsheets.values.append({
    spreadsheetId: SPREADSHEET_ID,
    range: `${SHEET_NAME}!A:C`,
    valueInputOption: 'RAW',
    requestBody: {
      values: [[today, String(telegramId), username || '']],
    },
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π
 */
async function fetchAttendanceRows() {
  const sheets = getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: `${SHEET_NAME}!A:C`,
  });
  return res.data.values || [];
}

async function hasAttendanceToday(telegramId) {
  const today = new Date().toISOString().slice(0, 10);
  const rows = await fetchAttendanceRows();
  return rows.some(([date, id]) => date === today && id === String(telegramId));
}

function isGymPhoto(ctx) {
  const caption = ctx.message?.caption?.toLowerCase() || '';
  return KEYWORDS.some((kw) => caption.includes(kw));
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –∏–∑ —á–∞—Ç–∞
 */
bot.on('photo', async (ctx) => {
  try {
    if (!isGymPhoto(ctx)) {
      return ctx.reply('–©–æ–± –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –¥–æ–¥–∞–π—Ç–µ –∫ —Ñ–æ—Ç–æ —Ö–µ—à—Ç–µ–≥ #gym (–∞–±–æ #–∑–∞–ª).');
    }

    const telegramId = ctx.from?.id;
    const username = ctx.from?.username || ctx.from?.first_name || '';

    if (await hasAttendanceToday(telegramId)) {
      return ctx.reply('–¢–∏ –≤–∂–µ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ üí™. –ü–æ–±–∞—á–∏–º–æ—Å—å –∑–∞–≤—Ç—Ä–∞!');
    }

    await recordAttendance({ telegramId, username });

    await ctx.reply('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞! üí™');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É', err);
    await ctx.reply('–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

/**
 * –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ /stats
 */
bot.command('stats', async (ctx) => {
  try {
    const rows = await fetchAttendanceRows();

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const stats = {};
    rows.forEach(([date, userId, username]) => {
      if (!username) username = userId;
      stats[username] = (stats[username] || 0) + 1;
    });

    const messageLines = Object.entries(stats)
      .sort((a, b) => b[1] - a[1])
      .map(([user, count], idx) => `${idx + 1}. ${user}: ${count}`);

    await ctx.reply(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:\n${messageLines.join('\n')}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', err);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.');
  }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ long-polling –≤ —Å—Ä–µ–¥–µ Serverless
bot.telegram.deleteWebhook().catch(() => {});

module.exports = async (req, res) => {
  if (req.method === 'POST') {
    try {
      await bot.handleUpdate(req.body);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', err);
    }
    return res.status(200).json({ ok: true });
  }
  // –î–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∂–∏–≤–∞
  res.status(200).send('Gym Attendance Bot is up.');
}; 